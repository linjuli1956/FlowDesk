# FlowDesk 日志系统配置文件
#
# 这个配置文件定义了FlowDesk应用程序的日志记录行为，包括日志格式、
# 输出目标、日志级别等。使用Python标准库的logging.config模块加载。
#
# 配置结构说明：
# - [loggers] 定义日志记录器，每个模块可以有独立的记录器
# - [handlers] 定义日志处理器，决定日志输出到哪里（文件、控制台等）
# - [formatters] 定义日志格式，控制日志消息的显示样式
#
# 日志级别说明：
# DEBUG(10) - 详细的调试信息，通常只在开发时使用
# INFO(20) - 一般信息，记录程序正常运行的重要事件
# WARNING(30) - 警告信息，程序仍能正常运行但有潜在问题
# ERROR(40) - 错误信息，程序某个功能无法正常执行
# CRITICAL(50) - 严重错误，程序可能无法继续运行

[loggers]
# 根日志记录器 - 所有其他记录器的父级，设置全局默认行为
keys=root,flowdesk,network,hardware,rdp,ui,system_tray

[handlers]
# 日志处理器 - 定义日志的输出目标和处理方式
keys=consoleHandler,fileHandler,errorHandler,rotatingHandler

[formatters]
# 日志格式器 - 定义日志消息的显示格式
keys=simpleFormatter,detailedFormatter,consoleFormatter,errorFormatter

# ==================== 日志记录器配置 ====================

[logger_root]
# 根记录器配置 - 作为所有记录器的默认配置
level=INFO
handlers=consoleHandler,rotatingHandler
# qualname为空表示这是根记录器

[logger_flowdesk]
# FlowDesk主应用程序记录器 - 记录应用程序级别的事件
level=INFO
handlers=consoleHandler,fileHandler
qualname=flowdesk
# propagate=0表示不向父记录器传播，避免重复记录
propagate=0

[logger_network]
# 网络模块记录器 - 记录网络配置、连接测试等相关事件
level=INFO
handlers=fileHandler
qualname=flowdesk.services.network
propagate=0

[logger_hardware]
# 硬件监控模块记录器 - 记录硬件信息获取、监控等事件
level=INFO
handlers=fileHandler
qualname=flowdesk.services.hardware
propagate=0

[logger_rdp]
# 远程桌面模块记录器 - 记录RDP连接、配置管理等事件
level=INFO
handlers=fileHandler
qualname=flowdesk.services.rdp
propagate=0

[logger_ui]
# UI模块记录器 - 记录界面相关事件（通常只记录错误）
level=WARNING
handlers=fileHandler
qualname=flowdesk.ui
propagate=0

[logger_system_tray]
# 系统托盘模块记录器 - 记录托盘相关事件
level=INFO
handlers=fileHandler
qualname=flowdesk.services.system_tray
propagate=0

# ==================== 日志处理器配置 ====================

[handler_consoleHandler]
# 控制台处理器 - 将日志输出到控制台/终端
class=StreamHandler
level=INFO
formatter=consoleFormatter
# sys.stdout表示输出到标准输出流
args=(sys.stdout,)

[handler_fileHandler]
# 文件处理器 - 将日志输出到指定文件
class=FileHandler
level=DEBUG
formatter=detailedFormatter
# 日志文件路径，使用UTF-8编码确保中文正常显示
args=('logs/flowdesk.log', 'a', 'utf-8')

[handler_errorHandler]
# 错误处理器 - 专门记录错误和严重错误到单独文件
class=FileHandler
level=ERROR
formatter=errorFormatter
args=('logs/error.log', 'a', 'utf-8')

[handler_rotatingHandler]
# 轮转文件处理器 - 自动轮转日志文件，防止单个文件过大
class=handlers.RotatingFileHandler
level=DEBUG
formatter=detailedFormatter
# 参数：文件路径，最大文件大小(10MB)，保留文件数量(5个)，编码
args=('logs/flowdesk.log', 'a', 10485760, 5, 'utf-8')

# ==================== 日志格式器配置 ====================

[formatter_simpleFormatter]
# 简单格式器 - 用于简洁的日志输出
format=%(levelname)s - %(message)s
datefmt=%H:%M:%S

[formatter_detailedFormatter]
# 详细格式器 - 包含完整的时间、模块、级别等信息
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S

[formatter_consoleFormatter]
# 控制台格式器 - 适合控制台显示的格式，包含颜色支持
format=%(asctime)s [%(levelname)s] %(name)s: %(message)s
datefmt=%H:%M:%S

[formatter_errorFormatter]
# 错误格式器 - 用于错误日志的详细格式，包含文件名和行号
format=%(asctime)s - %(levelname)s - %(name)s - %(filename)s:%(lineno)d - %(funcName)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S

# ==================== 配置说明和使用示例 ====================
#
# 在Python代码中使用此配置文件的方法：
#
# import logging.config
# logging.config.fileConfig('config/logging.conf')
# logger = logging.getLogger('flowdesk.services.network')
# logger.info('网络服务启动')
#
# 不同模块使用不同的记录器：
# - 主程序：logging.getLogger('flowdesk')
# - 网络模块：logging.getLogger('flowdesk.services.network')
# - 硬件模块：logging.getLogger('flowdesk.services.hardware')
# - RDP模块：logging.getLogger('flowdesk.services.rdp')
# - UI模块：logging.getLogger('flowdesk.ui')
# - 系统托盘：logging.getLogger('flowdesk.services.system_tray')
#
# 日志级别使用建议：
# - DEBUG：详细的调试信息，如变量值、函数调用等
# - INFO：重要的业务事件，如服务启动、配置加载、用户操作等
# - WARNING：潜在问题，如配置项缺失、网络延迟、资源不足等
# - ERROR：功能错误，如网络连接失败、文件读写错误等
# - CRITICAL：严重错误，如系统崩溃、数据损坏等
#
# 日志文件管理：
# - 主日志文件：logs/flowdesk.log（包含所有模块的日志）
# - 错误日志文件：logs/error.log（只包含错误和严重错误）
# - 日志轮转：当文件超过10MB时自动创建新文件，保留最近5个文件
# - 文件编码：使用UTF-8编码，确保中文日志正常显示
#
# 性能考虑：
# - 生产环境建议使用INFO级别，减少日志量
# - 开发环境可以使用DEBUG级别，获得详细信息
# - UI模块只记录WARNING及以上级别，避免界面操作产生过多日志
# - 使用轮转处理器防止日志文件过大影响性能
